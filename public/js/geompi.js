!function(t,i){"object"==typeof exports&&"object"==typeof module?module.exports=i(require("@svgdotjs/svg.js"),require("@svgdotjs/svg.draggable.js")):"function"==typeof define&&define.amd?define(["@svgdotjs/svg.js","@svgdotjs/svg.draggable.js"],i):"object"==typeof exports?exports.GeomPi=i(require("@svgdotjs/svg.js"),require("@svgdotjs/svg.draggable.js")):t.GeomPi=i(t["@svgdotjs/svg.js"],t["@svgdotjs/svg.draggable.js"])}(window,(function(t,i){return function(t){var i={};function s(e){if(i[e])return i[e].exports;var h=i[e]={i:e,l:!1,exports:{}};return t[e].call(h.exports,h,h.exports,s),h.l=!0,h.exports}return s.m=t,s.c=i,s.d=function(t,i,e){s.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:e})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,i){if(1&i&&(t=s(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(s.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var h in t)s.d(e,h,function(i){return t[i]}.bind(null,h));return e},s.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(i,"a",i),i},s.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},s.p="",s(s.s=2)}([function(i,s){i.exports=t},function(t,s){t.exports=i},function(t,i,s){"use strict";s.r(i);var e=s(0);s(1);class h{constructor(t){this.texLabelString=()=>this.label,this.texLabelPosition=()=>({x:this._svg.x(),y:this._svg.y()}),this.texLabelOffset=()=>"bl",this.showLabel=t=>(void 0===this._texLabel?this._texLabel=this._gdraw.texElement(void 0===t?this.texLabelString():t,this.texLabelPosition(),this.texLabelOffset()):(this._texLabel.update(),this._texLabel.show()),this),this.hideLabel=()=>(void 0!==this._texLabel&&this._texLabel.hide(),this),this.updateLabel=()=>(this._texLabel.label=this.texLabelString(),this._texLabel.pos=this.texLabelPosition(),this._texLabel.offset=this.texLabelOffset(),this._texLabel.update(),this),this._gdraw=t,this._gdraw.constructionList.push(this)}get gdraw(){return this._gdraw}get label(){return void 0===this._label?"":this._label}set label(t){this._label=t,void 0===this._texLabel?this.showLabel(t):this._texLabel.label=t}get svg(){return this._svg}set svg(t){this._svg=t}get texLabel(){return this._texLabel}set texLabel(t){this._texLabel=t}}class r extends h{constructor(t,i,s,e){return super(t),this.clone=()=>new r(this.gdraw,this.realX,this.realY,this.label),this._updatePoint=()=>{const t=this.gdraw._XYToCanvas({x:this._realX,y:this._realY}),i=t.x-this._x,s=t.y-this._y;return this._x=t.x,this._y=t.y,void 0!==this.svg&&this.svg.dmove(i,s),this},this.showPoint=()=>(void 0===this.svg?this.svg=this.gdraw.draw.path(`M${this.x-3},${this.y-3}L${this.x+3},${this.y+3}M${this.x+3},${this.y-3}L${this.x-3},${this.y+3}`).stroke("black"):this.svg.show(),this),this.hidePoint=()=>(void 0!==this.svg&&this.svg.hide(),this),this.showDraggable=(t,i)=>{if(void 0===this.svg){let s=this.gdraw.draw.circle(10).cx(this.x).cy(this.y).stroke("black").fill("rgba(1,1,1,0.2)").draggable();if(this.svg=s,!0===t){let t=this.gdraw.width,e=this.gdraw.height,h=this.gdraw.xAxis,r=this.gdraw.yAxis,a=this;s.on("dragmove",(function(s){const{handler:n,box:o}=s.detail;s.preventDefault();let{x:l,y:d}=o;l<0&&(l=0),l>t&&(l=t),d<0&&(d=0),d>e&&(d=e),l=Math.round(l/h.x)*h.x,d=Math.round(d/r.y)*r.y,n.move(l-o.width/2,d-o.width/2),a.xy={x:l,y:d},void 0!==i&&i(a,s)}))}}else this.svg.show();return this.svg.front(),this},this.texLabelPosition=()=>({x:this.x,y:this.y}),this.texLabelOffset=()=>{if(void 0===this._phantom)return"bl";const t=this._phantom.x-this.x,i=this._phantom.y-this.y,s=Math.sqrt(t*t+i*i);this.gdraw.getMidPointAsPixel(this._phantom,this);return{x:i/s*10,y:-t/s*10,anchor:`${i>=0?"l":"r"}${-t<=0?"b":"t"}`}},this.realX=+i,this.realY=+s,this.label=void 0===e?"":e,this._updatePoint(),this}get realXY(){return{x:this._realX,y:this._realY}}set realXY(t){this._realX=t.x,this._realY=t.y,this._updatePoint()}get realX(){return this._realX}set realX(t){this.realXY={x:t,y:this._realY}}get realY(){return this._realY}set realY(t){this.realXY={x:this._realX,y:t}}get x(){return this._x}set x(t){this.xy={x:+t,y:this.y}}get y(){return this._y}set y(t){this.xy={x:this.x,y:+t}}set xy(t){this._x=t.x,this._y=t.y;let i=this.gdraw._CanvasToXY(this);this._realX=i.x,this._realY=i.y}get phantom(){return this._phantom}set phantom(t){this._phantom=t,this.texLabel.offset=this.texLabelOffset()}}class a extends h{constructor(t,i,s){return super(t),this.clone=()=>new a(this.gdraw,this._center,this._radius),this.showCenter=()=>(this._center.showPoint(),this),this.texLabelPosition=()=>({x:this._center.x,y:this._center.y}),this._updateCenter=()=>(this.svg.cx(this._center.x).cy(this._center.y),this),this.setCenter=(t,i)=>(this._center.realX=t,this._center.realY=i,this._updateCenter(),this.updateLabel(),this),this.moveCenter=(t,i)=>(this._center.realX=this._center.realX+t,this._center.realY=this._center.realY+i,this._updateCenter(),this.updateLabel(),this),this._center=i,this.svg=this.gdraw.draw.circle(2*this.gdraw.sizeToCanvas(s)).cx(i.x).cy(i.y),this}get center(){return this._center}set center(t){this._center=t,this._updateCenter()}get radius(){return this._radius}set radius(t){this._radius=t,this.svg.radius(this.gdraw.sizeToCanvas(this._radius))}}class n extends h{constructor(t,i,s,e){super(t),this.clone=()=>new n(this.gdraw,this._start,this._end),this.texLabelString=()=>""===this.label?""!==this._start.label&&""!==this._end.label?this._start.label+this._end.label:"":this.label,this.texLabelPosition=()=>this.getMidPoint(!0),this.texLabelOffset=()=>{const t=this._end.x-this._start.x,i=this._end.y-this._start.y,s=Math.sqrt(t*t+i*i);this.getMidPoint(!0);return{x:i/s*10,y:-t/s*10,anchor:`${i>=0?"l":"r"}${-t<=0?"b":"t"}`}},this.getMidPoint=t=>this.gdraw.getMidPoint(this._start,this._end,t),this.showExtremities=()=>{this._start.showPoint(),this._end.showPoint()},this.showExtremitiesLabels=()=>{let t=this.getMidPoint(!0);this._start.phantom=t,this._start.showLabel(),this._end.phantom={x:t.x+this._end.x-this._start.x,y:t.y+this._end.y-this._start.y},this._end.showLabel()},this.update=()=>(this.svg.plot(this._start.x,this._start.y,this._end.x,this._end.y),this),this._start=i,this._end=s;let h=this.gdraw.draw.line(i.x,i.y,s.x,s.y).stroke("black");return this._marker=e,void 0!==this._marker&&h.marker("end",this._marker),this.svg=h,this}}class o{constructor(t,i,s){return this._gridPartial=(t,i,s,e,h,r={width:.5,color:"grey"})=>{i.y,i.x;const a={x:[0,e],y:[0,h]};let n,o,l=0,d={x:0,y:0},_={x:0,y:0},x=!0,g=!0;for(n=this._line({x:0,y:0},s,a).stroke(r).addClass(t),this._svg.add(n);d.x+=i.x,d.y+=i.y,_.x-=i.x,_.y-=i.y,x&&(n=this._line(d,s,a).stroke(r).addClass(t),o=n.attr(),this._isLineVisible(n,a)?(this._svg.add(n)):(n.remove(),x=!1)),g&&(n=this._line(_,s,a).stroke(r).addClass(t),o=n.attr(),this._isLineVisible(n,a)?(this._svg.add(n)):(n.remove(),g=!1)),(x||g)&&(l++,!(l>1e3)););},this._isLineVisible=(t,i)=>{const s=t.attr();return!(s.x1<i.x[0]&&s.x2<i.x[0])&&(!(s.x1>i.x[1]&&s.x2>i.x[1])&&(!(s.y1<i.y[0]&&s.y2<i.y[0])&&!(s.y1>i.y[1]&&s.y2>i.y[1])))},this._line=(t,i,s)=>{if(void 0===s&&(s={x:[0,100],y:[0,100]}),0===i.x)return this._draw.line(t.x,s.y[0],t.x,s.y[1]);const h=i.y/i.x,r=t.y-h*t.x;let a=new e.Point(s.x[0],r),n=new e.Point(s.x[1],r+h*s.x[1]);return this._draw.line(a.x,s.y[1]-a.y,n.x,s.y[1]-n.y)},this._gdraw=t,this._draw=t.draw,this._svg=t.draw.group(),void 0===i&&(i={x:this._draw.width(),y:this._draw.height()}),void 0===s&&(s={width:1,color:"black"}),this._gridPartial("gridE1",this._gdraw.yAxis,this._gdraw.xAxis,i.x,i.y,s),this._gridPartial("gridE2",this._gdraw.xAxis,this._gdraw.yAxis,i.x,i.y,s),this}set e1Stroke(t){this._svg.find(".gridE1").each("stroke",t)}set e2Stroke(t){this._svg.find(".gridE2").each("stroke",t)}set stroke(t){this.e1Stroke=t,this.e2Stroke=t}get svg(){return this._svg}}class l{constructor(t,i,s,e){this.update=()=>{if(""===this._label)return this.hide(),this;let t={x:0,y:0},i=0,s=0;return void 0===this._offset?t={x:0,y:0}:"string"==typeof this._offset?(this._offset.includes("b")?t.y=5:this._offset.includes("t")&&(t.y=-5,s=this.height),this._offset.includes("l")?(t.x=-5,i=-this.width):this._offset.includes("r")&&(t.x=5)):(t.x=+this._offset.x,t.y=+this._offset.y,this._offset.anchor.includes("r")&&(i=-this.width),this._offset.anchor.includes("b")&&(s=this.height)),this._htmlTexLabel.style.left=`${this._pos.x+t.x+i}px`,this._htmlTexLabel.style.top=`${this._pos.y+t.y-s}px`,this},this.show=()=>(this._htmlTexLabel.style.display="block",this),this.hide=()=>(this._htmlTexLabel.style.display="none",this),this._htmlTexLabel=document.createElement("div"),this._htmlTexLabel.style.display="block",this._htmlTexLabel.style.position="absolute",t.appendChild(this._htmlTexLabel),void 0!==i&&(this.label=i),this._pos={x:0,y:0},void 0===s||void 0===s.x||isNaN(s.x)||(this._pos.x=+s.x,this._pos.y=+s.y),this._offset=void 0!==e?e:"bl",this.update()}get label(){return this._label}set label(t){this._label=t,this._htmlTexLabel.innerHTML=this._label}get pos(){return this._pos}set pos(t){this._pos=t}get offset(){return this._offset}set offset(t){this._offset=t}get htmlTexLabel(){return this._htmlTexLabel}set htmlTexLabel(t){this._htmlTexLabel=t}get width(){return this._htmlTexLabel.offsetWidth}get height(){return this._htmlTexLabel.offsetHeight}}class d{constructor(t,i,s,h,d,_){return this.texLayer=()=>{this._container.style.position="relative",this._container.style.height=this._draw.height().toString()+"px",this._draw.node.style.position="absolute",this._draw.node.style.left="0",this._draw.node.style.right="0",this._draw.node.style.width=this._draw.width().toString()+"px",this._draw.node.style.height=this._draw.height().toString()+"px",this._texLayer=document.createElement("div"),this._texLayer.id=`${this._draw.id()}-texLayer`,this._texLayer.style.position="absolute",this._texLayer.style.left="0",this._texLayer.style.top="0",this._texLayer.style.width=this._draw.width().toString()+"px",this._texLayer.style.height=this._draw.height().toString()+"px",this._texLayer.style.zIndex=(+this._draw.node.style.zIndex+10).toString(),this._texLayer.style.pointerEvents="none",this._container.appendChild(this._texLayer)},this.texElement=(t,i,s)=>new l(this._texLayer,t,i,s),this.showOrigin=(t="O",i="bl")=>(this._gOrigin=new r(this,0,0,t).showPoint(),this._gOrigin.showLabel(),this),this.showAxis=()=>(this._gAxis=[this.addVector(this.addPoint(0,0),this.addPoint(1,0)),this.addVector(this.addPoint(0,0),this.addPoint(0,1))],this),this.showGrid=(t,i={width:.5,color:"grey"})=>(this._gGrid=new o(this,t,i),this),this.sizeToCanvas=t=>Math.sqrt(Math.pow(t*this._xAxis.x,2)+Math.pow(t*this._xAxis.y,2)),this._XYToCanvas=t=>{let i=this._origin.x*this._xAxis.x+this._origin.y*this._yAxis.x,s=this._origin.x*this._xAxis.y+this._origin.y*this._yAxis.y;return{x:i+t.x*this._xAxis.x+t.y*this._yAxis.x,y:this._draw.height()-(s+t.x*this._xAxis.y+t.y*this._yAxis.y)}},this._CanvasToXY=t=>{let i=this._origin.x*this._xAxis.x+this._origin.y*this._yAxis.x,s=this._origin.x*this._xAxis.y+this._origin.y*this._yAxis.y;return{x:(t.x-i)/this.xAxis.x,y:(this._draw.height()-(t.y-s))/this.yAxis.y}},this.addPoint=(t,i,s)=>new r(this,t,i,s),this.midPoint=(t,i)=>new r(this,(t.realX+i.realX)/2,(t.realY+i.realY)/2),this.addSegment=(t,i)=>new n(this,t,i),this.addVector=(t,i)=>new n(this,t,i,this._arrow),this.addCircle=(t,i)=>new a(this,t,i),this.getMidPoint=(t,i,s)=>{const e={x:(t.realX+i.realX)/2,y:(t.realY+i.realY)/2};return void 0===s||!1===s?e:this._XYToCanvas(e)},this.getMidPointAsPixel=(t,i)=>this._XYToCanvas({x:(t.x+i.x)/2,y:(t.y+i.y)/2}),this._width=void 0===i?1600:i,this._height=void 0===s?1200:s,this._draw=Object(e.SVG)().addTo(t).size(this._width,this._height),void 0!==_&&this._draw.viewbox("10 10 800 600"),this._container=this._draw.node.parentElement,this.texLayer(),this.arrowScale=10,this._xAxis=new e.Point(void 0===h?72:h,0),this._yAxis=new e.Point(0,void 0===d?72:d),this._origin={x:0,y:0},this._constructionList=[],this}get xAxis(){return this._xAxis}set xAxis(t){this._xAxis=t}get yAxis(){return this._yAxis}set yAxis(t){this._yAxis=t}get origin(){return this._origin}set origin(t){this._origin=t}get arrowScale(){return this._arrowScale}set arrowScale(t){this._arrowScale=t;let i=+this._arrowScale;this._arrow=this._draw.marker(i,i,(function(t){t.path(`M1,0 L1,${i}, L${1.2*i},${i/2} L1,0z`)})).ref(i,i/2)}get draw(){return this._draw}get constructionList(){return this._constructionList}get gOrigin(){return this._gOrigin}get gGrid(){return this._gGrid}get gAxis(){return this._gAxis}get width(){return this._width}get height(){return this._height}}s.d(i,"GeomPi",(function(){return _})),window.GeomPi=d;var _={GeometryDraw:d}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,