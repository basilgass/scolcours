!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Pi=e():t.Pi=e()}(window,(function(){return function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e),i.d(e,"Pi",(function(){return c}));class s{static prime(t){let e=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973];return void 0===t?e:e.slice(0,Math.max(e.length,t))}static dividers(t){let e;const i=Math.sqrt(t);e=[];for(let s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return e.sort((function(t,e){return t-e})),e}static gcd(...t){let e=function(t,i){return 0===i?t:e(i,t%i)},i=1,s=2;if(0===t.length)return 1;if(1===t.length)return 0===t[0]?1:t[0];if(i=e(t[0],t[1]),1===i)return 1;for(s=2;s<t.length&&(i=e(i,t[s]),1!==i);s++);return Math.abs(i)}static lcm(...t){return t.reduce((function(t,e){return Math.abs(t*e/s.gcd(t,e))}))}static randomBool(t=.5){return Math.random()<t}static randomInt(t,e){return void 0===e?s.randomInt(0,t):Math.floor(Math.random()*(e-t+1)+t)}static randomIntSym(t,e){return!1===e?s.randomBool()?this.randomInt(1,t):-this.randomInt(1,t):s.randomInt(-t,t)}}class r{constructor(t){return this.zero=()=>(this._numerator=0,this._denominator=1,this),this.clone=()=>{let t=new r;return t.numerator=+this._numerator,t.denominator=+this._denominator,t},this.parse=(t,e)=>{let i;switch(typeof t){case"string":if(i=t.split("/"),1===i.length)return this.parse(+i[0]);2===i.length?"0"===i[1]?(this._numerator=NaN,this._denominator=1):(this._numerator=+i[0],this._denominator=+i[1]):(this._numerator=NaN,this._denominator=1);break;case"number":if(Number.isSafeInteger(t))this._numerator=t,this._denominator=1;else{let i=t.toString().split(".")[1].length;void 0===e?(this._numerator=t*Math.pow(10,i),this._denominator=Math.pow(10,i)):Number.isSafeInteger(e)&&(this._numerator=t*Math.pow(10,i)-Math.floor(t*Math.pow(10,i-e)),this.denominator=Math.pow(10,i)-Math.pow(10,i-e))}}return this},this.parseByInteger=(t,e)=>(Number.isSafeInteger(t)&&(this._numerator=t),void 0!==e&&Number.isSafeInteger(e)?this._denominator=e:this._denominator=1,this),this.reduce=()=>{let t=s.gcd(this._numerator,this._denominator);return this._numerator=this._numerator/t,this._denominator=this._denominator/t,this._denominator<0&&(this._denominator=-this._denominator,this._numerator=-this._numerator),this},this.invalid=()=>{let t=new r;return t._numerator=NaN,t._denominator=1,t},this.infinite=()=>{let t=new r;return t._numerator=1/0,t._denominator=1,t},this.opposed=()=>(this._numerator=-this._numerator,this),this.multiply=t=>(this._numerator=this._numerator*t.numerator,this._denominator=this._denominator*t.denominator,this.reduce()),this.multiplyByInt=t=>(this._numerator=this._numerator*t,this.reduce()),this.amplify=t=>(Number.isSafeInteger(t)&&(this._numerator*=t,this._denominator*=t),this),this.divide=t=>{if(0===t.numerator)return(new r).infinite();let e=+this._numerator,i=+this._denominator;return this._numerator=e*t.denominator,this._denominator=i*t.numerator,this.reduce()},this.add=t=>{let e=this._numerator,i=this._denominator;return this._numerator=e*t.denominator+t.numerator*i,this._denominator=i*t.denominator,this.reduce()},this.substract=t=>this.add(t.clone().opposed()),this.pow=t=>Number.isSafeInteger(t)?(this.reduce(),t>0?(this._numerator=this._numerator**t,this._denominator=this._denominator**t):(this._numerator=this._denominator**t,this._denominator=this._numerator**t),this):this.invalid(),this.sqrt=()=>this,this.abs=()=>(this._numerator=Math.abs(this._numerator),this._denominator=Math.abs(this._denominator),this),this.sign=()=>this._numerator*this._denominator>=0?1:-1,this.isEqual=t=>{let e=t.clone().reduce(),i=this.clone().reduce();return i.numerator===e.numerator&&i.denominator===e.denominator},this.areEquals=(...t)=>{for(let e=0;e<t.length;e++)if(!this.isEqual(t[e]))return!1;return!0},this.compare=(t,e)=>{switch(void 0===e&&(e="="),e){case">":return this.value>t.value;case">=":return this.value>=t.value;case"<":return this.value<t.value;case"<=":return this.value<=t.value;case"=":return this.isEqual(t);case"<>":return!this.isEqual(t);default:return!1}},this.lesser=t=>this.compare(t,"<"),this.leq=t=>this.compare(t,"<="),this.greater=t=>this.compare(t,">"),this.geq=t=>this.compare(t,">="),this.isInfinity=()=>this._numerator===1/0,this.isFinite=()=>!this.isInfinity(),this._numerator=1,this._denominator=1,void 0!==t&&this.parse(t),this}isFraction(){return!0}set numerator(t){this._numerator=t}set denominator(t){this._denominator=t}get numerator(){return this._numerator}get denominator(){return this._denominator}get value(){return this._numerator/this._denominator}get display(){return 1===this._denominator?`${this._numerator}`:`${this._numerator}/${this._denominator}`}get frac(){return 1===this._denominator?`${this._numerator}`:`\\frac{ ${this._numerator} }{ ${this._denominator} }`}get dfrac(){return 1===this._denominator?`${this._numerator}`:this._numerator>0?`\\dfrac{ ${this._numerator} }{ ${this._denominator} }`:`-\\dfrac{ ${Math.abs(this._numerator)} }{ ${this._denominator} }`}}class n{constructor(){return this.parse=t=>{this.literalStr=t,this._coefficient=new r;for(const e of[...t.replace(/([a-z])|(\^[+-]?[0-9]+)/g,",").split(",")])""!==e.trim()&&this._coefficient.multiply((new r).parse(e.trim()));return this},this.clean=()=>{for(let t in this._literal)0===this._literal[t]&&delete this._literal[t];return this},this.zero=()=>(this._coefficient=(new r).zero(),this._literal={},this),this.clone=()=>{let t=new n;t.coefficient=this._coefficient.clone();for(let e in this._literal)t.letter(e,this._literal[e]);return t},this.random=(t="x",e=1,i=!1,r=!0)=>{this.coefficient.parseByInteger(s.randomIntSym(10,r),i?s.randomInt(1,10):1);for(let i of t.split(""))this.letter(i,t.length>1?s.randomInt(e):e);return this},this.letter=(t,e)=>{e<=0||!Number.isSafeInteger(e)?void 0!==this._literal[t]&&delete this._literal[t]:this._literal[t]=e},this.isSameAs=t=>{let e=Object.keys(this._literal),i=Object.keys(t.literal),s=e.concat(i.filter(t=>e.indexOf(t)<0));for(let e of s){if(void 0===this._literal[e]||void 0===t.literal[e])return!1;if(this._literal[e]!==t.literal[e])return!1}return!0},this.areSameAs=(...t)=>{for(let e=0;e<t.length;e++)if(!this.isSameAs(t[e]))return!1;return!0},this.isEqual=t=>!!this.isSameAs(t)&&this._coefficient.isEqual(t.coefficient),this.areEquals=(...t)=>{if(!this.areSameAs(...t))return!1;for(let e of t)if(!this._coefficient.isEqual(e.coefficient))return!1;return!0},this.degree=t=>0===Object.entries(this._literal).length?0:void 0===t?Object.values(this._literal).reduce((t,e)=>t+e):void 0===this._literal[t]?0:this._literal[t],this.hasLetter=t=>(void 0===t&&(t="x"),void 0!==this._literal[t]&&0!==this._literal[t]),this.opposed=()=>(this._coefficient.opposed(),this),this.add=(...t)=>{for(let e of t)this.isSameAs(e)?this._coefficient.add(e.coefficient):console.log("Add: Is not similar: ",e.display);return this},this.substract=(...t)=>{for(let e of t)this.isSameAs(e)?this._coefficient.add(e.coefficient.clone().opposed()):console.log("Substract: Is not similar: ",e.display);return this},this.multiply=(...t)=>{for(let e of t){this._coefficient.multiply(e.coefficient);for(let t in e.literal)this._literal[t]=void 0===this._literal[t]?e.literal[t]:this._literal[t]+e.literal[t]}return this},this.divide=(...t)=>{for(let e of t){this._coefficient.divide(e.coefficient);for(let t in e.literal)this._literal[t]=void 0===this._literal[t]?-e.literal[t]:this._literal[t]-e.literal[t],0===this._literal[t]&&delete this._literal[t]}return this},this.pow=t=>{this._coefficient.pow(t);for(let e in this._literal)this._literal[e]*=t;return this},this.evaluate=t=>{let e=this.coefficient.clone();for(let i in this._literal){if(void 0===t[i])return(new r).zero();e.multiply(t[i].clone().pow(this._literal[i]))}return e},this._coefficient=(new r).zero(),this._literal={},this}isMonom(){return!0}set coefficient(t){this._coefficient=t}set literal(t){this._literal=t}set literalStr(t){for(const e of[...t.matchAll(/([a-z])\^([+-]?[0-9]+)/g)])e[1]in this._literal||(this._literal[e[1]]=0),this._literal[e[1]]+=+e[2];for(const e of[...t.matchAll(/([a-z](?!\^))/g)])e[1]in this._literal||(this._literal[e[1]]=0),this._literal[e[1]]+=1}get coefficient(){return this._coefficient}get literal(){return this._literal}get isZero(){return 0===this._coefficient.value}get isMultiVariable(){let t=0;for(let e in this._literal)0!=this._literal[e]&&t++;return t>1}get variables(){return this.clean(),Object.keys(this._literal)}get numberOfVar(){return this.variables.length}get display(){let t="";for(let e in this._literal)0!==this._literal[e]&&(t+=`${e}`,this._literal[e]>1&&(t+=`^${this._literal[e]}`));return""===t?0!=this._coefficient.value?`${this._coefficient.display}`:"":1===this._coefficient.value?t:-1===this._coefficient.value?`-${t}`:0===this._coefficient.value?"0":`${this._coefficient.display}${t}`}get displayWithSign(){let t=this.display;return("-"!==t[0]?"+":"")+t}get tex(){let t="";for(let e in this._literal)0!==this._literal[e]&&(t+=`${e}`,this._literal[e]>1&&(t+=`^${this._literal[e]}`));return""===t?0!=this._coefficient.value?`${this._coefficient.dfrac}`:"":1===this._coefficient.value?t:-1===this._coefficient.value?`-${t}`:0===this._coefficient.value?"0":`${this._coefficient.dfrac}${t}`}}n.lcm=(...t)=>{let e=new n,i=t.map(t=>t.coefficient.numerator),o=t.map(t=>t.coefficient.denominator),h=s.gcd(...i),l=s.lcm(...o);e.coefficient=(new r).parseByInteger(h,l).reduce();for(let i of t){for(let t in e.literal)t in i.literal||(e.literal[t]=0);for(let t in i.literal)void 0===e.literal[t]&&i.literal[t]>0?e.literal[t]=i.literal[t]:e.literal[t]=Math.min(i.literal[t],e.literal[t])}return e},n.xmultiply=(t,e)=>t.clone().multiply(e);class o{constructor(){this._rpn=[]}isOperation(t){return!!t[0].match(/[+\-*/^]/g)||!!t.match(/^sin|cos|tan/g)}NextToken(t,e){let i,s,r;return i=t.substr(e).match(/^[0-9/a-z^]+/g)||[],i.length>0?(s=i[0],r="monom"):t[e].match(/[+\-*/^]/g)?(s=t[e],r="operation"):"("===t[e]?(s="(",r="("):")"===t[e]?(s=")",r=")"):","===t[e]?(s=",",r="function-argument"):t.match(/^(sin|cos|tan)/g)?(s=")",r=")"):(s=i[0],r="monom",""===s&&(s=t[e],r="monom",console.log("SHUTING YARD - NEXT TOKEN: error at ",e))),[s,e+s.length,r]}Uniformizer(t){let e;return e=t.replace(/\)\(/g,")*("),e=e.replace(/([\da-z])(\()/g,"$1*$2"),e=e.replace(/(\))([\da-z])/g,"$1*$2"),e}parse(t){let e=[],i=[],s={"^":4,"*":3,"/":3,"+":2,"-":2},r={"^":"right","*":"left","/":"left","+":"left","-":"left"},n="",o=0,h="";t=this.Uniformizer(t);let l,a=50;for(;o<t.length;){if(a--,0===a){console.log("SECURITY LEVEL 1 EXIT");break}switch([n,o,h]=this.NextToken(t,o),h){case"monom":e.push(n);break;case"operation":if(i.length>0){let t=i[i.length-1];for(l=50;t in r&&("left"===r[n]&&s[n]<=s[t]||"right"===r[n]&&s[n]<s[t]);){if(l--,0===l){console.log("SECURITY LEVEL 2 OPERATION EXIT");break}e.push(i.pop()||""),t=i[i.length-1]}}i.push(n);break;case"trigo":i.push(n);break;case"function-argument":for(l=50;"("!==i[i.length-1]&&i.length>0;){if(l--,0===l){console.log("SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT");break}e.push(i.pop()||"")}break;case"(":i.push(n),console.log(n,o,t[o],t[o+1]),"-"===t[o]&&e.push("0");break;case")":for(l=50;"("!==i[i.length-1]&&i.length>1;){if(l--,0===l){console.log("SECURITY LEVEL 2 CLOSING PARENTHESE EXIT");break}e.push(i.pop()||"")}i.pop();break;default:console.log(`SHUTING YARD: ${h} : ${n} `)}}return this._rpn=e.concat(i.reverse()),this}get rpn(){return this._rpn}}class h{constructor(t){this.isPolynom=()=>!0,this.parse=t=>(this._rawString=t,this.shutingYardToReducedPolynom(t)),this.parseByCoefficient=(t,...e)=>{this.empty();let i=e.length-1;for(let s of e){let e=new n;e.coefficient=s.clone(),e.literalStr=`${t}^${i}`,this.addMonom(e),i--}return this},this.empty=()=>(this._monoms=[],this),this.zero=()=>(this._monoms=[],this._monoms.push((new n).zero()),this._rawString="0",this),this.clone=()=>{const t=new h,e=[];for(const t of this._monoms)e.push(t.clone());return t.monoms=e,t},this.rndSimple=(t=1,e=!1,i=!1,o="x",h=!0,l=-1)=>{let a;this.empty();for(let s=t;s>=0;s--)a=(new n).random(o,s,i,s!==t&&h),e&&s===t&&(a.coefficient=(new r).parse("1")),this.addMonom(a);if(l>0&&l<this.length)for(this.reorder();this.length>l;)this._monoms.splice(s.randomInt(1,this.length-1),1);return this},this.rndFactorable=(t=2,e=!1,i="x")=>{this._factors=[];for(let s=0;s<t;s++)this._factors.push((new h).rndSimple(1,e,!1,i));this.empty().monoms=this._factors[0].monoms;for(let t=1;t<this._factors.length;t++)this.multiply(this._factors[t]);return this},this.makeItComplicate=(t=1)=>{if(this._texString="",this.degree()<1)return this;const e=s.randomInt(0,this.degree()-1),i=(new h).rndSimple(e,!1,t>1,"x",!1,t>1?-1:1),r=(new h).rndSimple(1,!1,t>1),n=this.clone().substract(i.clone().multiply(r));return n.factorizePartial(!0),this._texString=`${i.genDisplay("tex",!1,!0)} \\cdot ${r.genDisplay("tex",!1,!0)} ${n.texString} `,this},this.factorizePartial=t=>{if(this._texString="",this.length<=1)return this;let e,i,r,o,l,a;for(let u=0;u<this.length;u++){e=this._monoms[u].clone();for(let c=u+1;c<this.length;c++)if(i=this._monoms[c].clone(),l=s.gcd(e.coefficient.numerator,i.coefficient.numerator),1!==l)return r=n.lcm(e,i),a=1===e.coefficient.sign()?"+":"-",this._texString=`${!0===t?a:"+"===a?"":a}${r.tex}`,o=(new h).addMonom(e.divide(r)).addMonom(i.divide(r)),this._texString+=o.genDisplay("tex",!1,!0),this._texString+=this.clone().substract(o.clone().multiplyByMonom(r)).genDisplay("tex",!0,!1),this}return this._texString=this.genDisplay("tex",t),this},this.addMonom=(...t)=>{for(const e of t)this._monoms.push(e.clone());return this.reduce()},this.substractMonom=(...t)=>{for(const e of t)this._monoms.push(e.clone().opposed());return this.reduce()},this.reduce=()=>{for(let t=0;t<this._monoms.length;t++)for(let e=t+1;e<this._monoms.length;e++)this._monoms[t].isSameAs(this.monoms[e])&&(this._monoms[t].add(this.monoms[e]),this._monoms.splice(e,1));this._monoms=this._monoms.filter(t=>0!==t.coefficient.value);for(const t of this._monoms)t.coefficient.reduce();return 0===this.length?(new h).zero():this},this.minify=()=>(this.multiplyByInteger(this.lcmDenominator()).divideByInteger(this.gcdNumerator()).reduce(),this.reduce()),this.factorize=()=>(this._factors=[],this),this.reorder=(t="x")=>(this._monoms.sort((function(e,i){return i.degree(t)-e.degree(t)})),this.reduce()),this.opposed=()=>(this._monoms=this._monoms.map(t=>t.opposed()),this),this.add=t=>(this._monoms=this._monoms.concat(t.monoms),this.reduce()),this.substract=t=>(this._monoms=this._monoms.concat(t.clone().opposed().monoms),this.reduce()),this.multiply=t=>{const e=[];for(const i of this._monoms)for(const s of t.monoms)e.push(n.xmultiply(i,s));return this._monoms=e,this.reduce()},this.multiplyByFraction=t=>{for(const e of this._monoms)e.coefficient.multiply(t);return this.reduce()},this.multiplyByInteger=t=>this.multiplyByFraction((new r).parseByInteger(t)),this.multiplyByMonom=t=>{for(const e of this._monoms)e.multiply(t);return this.reduce()},this.mutliplyByFraction=t=>{for(const e of this._monoms)e.coefficient.multiply(t);return this},this.divideByInteger=t=>{const e=(new r).parseByInteger(t);for(const t of this._monoms)t.coefficient.divide(e);return this},this.divideByFraction=t=>{for(const e of this._monoms)e.coefficient.divide(t);return this},this.replaceBy=(t,e)=>{let i;const s=(new h).zero();for(const r of this.monoms)void 0===r.literal[t]||0===r.literal[t]?s.addMonom(r.clone()):(i=+r.literal[t],delete r.literal[t],s.add(e.clone().pow(i).multiplyByMonom(r)));return this._monoms=s.reduce().reorder().monoms,this},this.divide=t=>{const e=(new h).zero(),i=this.clone(),s=t.monomByDegree();let r;for(;i.degree()>=t.degree()&&(r=i.monomByDegree().clone().divide(s),!r.isZero);)e.addMonom(r),i.substract(t.clone().multiplyByMonom(r));return{quotient:e,reminder:i}},this.pow=t=>{if(!Number.isSafeInteger(t))return this.zero();if(t<0)return this.zero();if(0===t)return new h;const e=this.clone();for(let i=1;i<t;i++)this.multiply(e);return this.reduce()},this.degree=t=>{let e=0;for(const i of this._monoms)e=Math.max(i.degree(t),e);return e},this.monomByDegree=(t,e)=>{if(void 0===t)return this.monomByDegree(this.degree(e));const i=this.clone().reduce();for(const s of i._monoms)if(s.degree(e)===t)return s.clone();return(new n).zero()},this.monomByLetter=t=>{const e=this.clone().reduce();for(const i of e._monoms)if(i.hasLetter(t))return i.clone();return(new n).zero()},this.evaluate=t=>{const e=(new r).zero();return this._monoms.forEach(i=>{console.log("Evaluate polynom: ",i.display,t,i.evaluate(t).display),e.add(i.evaluate(t))}),e},this.canDivide=(t,e="x")=>{const i=t.degree(),s={};if(0===i)return!t.isTrivial;if(1===i){const i=t.getZeroes();return!0!==i[0]&&!1!==i[0]&&(s[e]=i[0],0===this.evaluate(s).value)}return i>1&&(console.log("Currently, only first degree polynom are supported"),!1)},this.getZeroes=()=>{switch(this.degree()){case 0:return 0===this._monoms[0].coefficient.value?[!0]:[!1];case 1:if(1===this._monoms.length)return[(new r).zero()];{const t=this.clone().reduce().reorder();return[t.monoms[1].coefficient.opposed().divide(t.monoms[0].coefficient)]}case 2:return[!0,!1]}return[]},this.getDenominators=()=>{const t=[];for(const e of this._monoms)t.push(e.coefficient.denominator);return t},this.getNumerators=()=>{const t=[];for(const e of this._monoms)t.push(e.coefficient.numerator);return t},this.lcmDenominator=()=>s.lcm(...this.getDenominators()),this.gcdDenominator=()=>s.gcd(...this.getDenominators()),this.lcmNumerator=()=>s.lcm(...this.getNumerators()),this.gcdNumerator=()=>s.gcd(...this.getNumerators()),this.isSameAs=t=>{const e=this.clone().reduce().reorder(),i=t.clone().reduce().reorder();if(e.length!==i.length)return!1;if(e.degree()!==i.degree())return!1;for(const t in e.monoms)if(!e.monoms[t].isEqual(i.monoms[t]))return!1;return!0},this.isOpposedAt=t=>this.isSameAs(t.clone().opposed()),this._genDisplayAddPlus=(t,e,i)=>1!==e.coefficient.sign()||""===t&&!0!==i?"":"+",this.genDisplay=(t,e,i)=>{let s="";for(const i of this._monoms)0!==i.coefficient.value&&(s+=`${this._genDisplayAddPlus(s,i,e)}${"tex"===t?i.tex:i.display}`);return!0===i&&this.length>1&&(s="tex"===t?`\\left( ${s} \\right)`:`(${s})`),""===s&&(s="0"),s},this._monoms=[],this._factors=[],void 0!==t&&this.parse(t)}shutingYardToReducedPolynom(t){const e=(new o).parse(t),i=e.rpn,s=[];let r,l;for(const t of i)if(e.isOperation(t)){switch(l=s.pop()||(new h).zero(),r=s.length>0&&s.pop()||(new h).zero(),t){case"+":r.add(l);break;case"-":r.substract(l);break;case"*":r.multiply(l);break;default:console.log("Token not recognized in shuting yard to reduce polynom: ",t)}s.push(r)}else s.push((new h).addMonom((new n).parse(t)));return this._monoms=s[0].monoms,this}get length(){return this._monoms.length}get monoms(){return this._monoms}set monoms(t){this._monoms=t}get display(){return this.genDisplay()}get raw(){return this._rawString}get tex(){return this.genDisplay("tex")}get texString(){return this._texString}get isTrivial(){return 0===this._monoms.length&&0===this._monoms[0].coefficient.value}get isMultiVariable(){for(const t of this._monoms)if(t.isMultiVariable)return!0;return!1}get factors(){return this._factors}set factors(t){this._factors=t}get variables(){let t=[];for(const e of this._monoms)t=t.concat(e.variables);return t=[...new Set(t)],t}get numberOfVars(){return this.variables.length}}class l{constructor(){this.parse=(t,e,i)=>(this._coefficient=void 0===i?1:i,this._nth=void 0===e?2:e,this._radical=void 0===t?1:t,this._nth%2==0&&this._radical<0&&(this._isValid=!1),this),this.reduce=()=>{let t=Math.floor(Math.pow(this._radical,1/this._nth));for(;t>1;)this._radical%Math.pow(t,this._nth)!=0?t--:(this._coefficient*=t,this._radical=this._radical/Math.pow(t,this._nth),t=Math.floor(Math.pow(this._radical,1/this._nth)));return this},this.hasRadical=()=>!(1===this._radical||0===this._radical||!1===this._isValid),this.multiply=t=>(this._radical*=t.radical,this.reduce()),this._radical=1,this._coefficient=1,this._nth=2,this._isValid=!0}get radical(){return this._radical}set radical(t){this._radical=t}get nth(){return this._nth}set nth(t){Number.isSafeInteger(t)&&t>=2?this._nth=t:(console.log("Error setting the nth root"),this._nth=2)}get coefficient(){return this._coefficient}set coefficient(t){this._coefficient=t}get tex(){let t;return t=1===this._coefficient?"":-1===this._coefficient?"-":this._coefficient.toString(),1===this._radical?`${this._coefficient}`:2===this._nth?`${t}\\sqrt{${this._radical}}`:`${t}\\sqrt[${this._nth}]{${this._radical}}`}get value(){return this._coefficient*Math.pow(this._radical,1/this._nth)}}class a{constructor(t){return this._varnothing="\\varnothing",this._real="\\mathbb{R}",this.parseString=t=>{let e,i;if(i=this._findSign(t),!1!==i)return e=t.split(i),this.create((new h).parse(e[0]),(new h).parse(e[1]),this._formatSign(i));console.log("The equation is not valid (no sign found)")},this._findSign=t=>t.includes("geq")?t.includes("\\geq")?"\\geq":"geq":t.includes("leq")?t.includes("\\leq")?"\\leq":"leq":t.includes(">=")?">=":t.includes("=>")?"=>":t.includes(">")?">":t.includes("<=")?"<=":t.includes("=<")?"=<":t.includes("<")?"<":t.includes("=")?"=":(console.log("Equation: parse string : sign not found"),!1),this._formatSign=t=>void 0===t?"=":t.includes("geq")||t.includes(">=")||t.includes("=>")?">=":t.includes(">")?">":t.includes("leq")||t.includes("<=")||t.includes("=<")?"<=":t.includes("<")?"<":"=",this.create=(t,e,i)=>(this._left=t,this._right=e,this._sign=this._formatSign(i),this),this.clone=()=>(new a).create(this._left.clone(),this._right.clone(),this._sign+""),this.reorder=()=>{let t;this._left.substract(this._right),this._right.zero();for(let e of this._left.monoms)0===e.degree()&&(t=e.clone(),this._left.substractMonom(t).reorder(),this._right.substractMonom(t).reorder());return this},this.degree=t=>Math.max(this._left.degree(t),this._right.degree(t)),this.isMultiVariable=()=>this._left.isMultiVariable||this._right.isMultiVariable,this.isolate=t=>{if(1!==this.degree(t))return!1;if(this.isMultiVariable())return!1;let e,i;this._left.substract(this._right),this._right.zero();for(let i of this._left.monoms)i.hasLetter(t)||(e=i.clone(),this._left.addMonom(e.clone().opposed()),this._right.addMonom(e.clone().opposed()));return 1===this._left.length&&(i=this._left.monoms[0].coefficient.clone(),this._left.divideByFraction(i),this._right.divideByFraction(i),this)},this.solve=t=>{switch(this._solutions=[],this._polynom=this._left.clone().substract(this._right),this._polynom.degree(t)){case 0:case 1:this._solveDegree1(t);break;case 2:this._solveDegree2(t);break;default:this._solveDegree3plus(t)}},this.isGreater=()=>-1!==this._sign.indexOf(">")||-1!==this._sign.indexOf("geq"),this.isStrictEqual=()=>"="===this._sign,this.isAlsoEqual=()=>-1!==this._sign.indexOf("=")||(-1!==this._sign.indexOf("geq")||(-1!==this._sign.indexOf("leq")||void 0)),this._solveDegree1=t=>{const e=this._polynom.monomByDegree(1,t).coefficient,i=this._polynom.monomByDegree(0,t).coefficient,s=i.clone().opposed().divide(e).display;let r;return this.isStrictEqual()?0===e.value?0===i.value?this._solutions=[this._real]:this._solutions=[this._varnothing]:this._solutions=[s]:(r=0===e.value?0===i.value&&this.isAlsoEqual()?"\\mathbb{R}":i.value>0?this.isGreater()?this._real:this._varnothing:this.isGreater()?this._varnothing:this._real:this.isGreater()&&1===e.sign()||!this.isGreater()&&-1===e.sign()?`\\left${this.isAlsoEqual()?"\\[":"\\]"}${s};+\\infty\\right\\[`:`\\left\\]-\\infty;${s} \\right\\${this.isAlsoEqual()?"\\]":"\\["}`,this._solutions=[r]),this._solutions},this._solveDegree2=t=>{let e,i,n,o,h,a,u=this._polynom.monomByDegree(2,t).coefficient,c=this._polynom.monomByDegree(1,t).coefficient,f=this._polynom.monomByDegree(0,t).coefficient,m=s.lcm(u.denominator,c.denominator,f.denominator),_=u.multiplyByInt(m).value,d=c.multiplyByInt(m).value;if(e=d*d-4*_*f.multiplyByInt(m).value,e>0)if(n=(-d-Math.sqrt(e))/(2*_),o=(-d+Math.sqrt(e))/(2*_),i=(new l).parse(e).reduce(),i.hasRadical()){let t=s.gcd(d,2*_,i.coefficient);i.coefficient=i.coefficient/t,this._solutions=0!==d?2*_/t==1?[`${-d/t} - ${i.tex}`,`${-d/t} + ${i.tex}`]:[`\\dfrac{${-d/t} - ${i.tex} }{ ${2*_/t} }`,`\\dfrac{${-d/t} + ${i.tex} }{ ${2*_/t} }`]:2*_/t==1?[`- ${i.tex}`,`${i.tex}`]:[`\\dfrac{- ${i.tex} }{ ${2*_/t} }`,`\\dfrac{${i.tex} }{ ${2*_/t} }`]}else this._solutions=[(new r).parseByInteger(-d-i.coefficient,2*_).reduce().dfrac,(new r).parseByInteger(-d+i.coefficient,2*_).reduce().dfrac];else this._solutions=0===e?[(new r).parseByInteger(-d,2*_).reduce().dfrac]:[this._varnothing];return this.isStrictEqual()||(2===this._solutions.length?(h=n<o?this._solutions[0]:this._solutions[1],a=n<o?this._solutions[1]:this._solutions[0],this.isGreater()&&1===u.sign()||!this.isGreater()&&-1===u.sign()?this._solutions=[`\\left]-\\infty ; ${h}\\right${this.isAlsoEqual()?"]":"["} \\cup \\left${this.isAlsoEqual()?"[":"]"}${a};+\\infty\\right[`]:this._solutions=[`\\left${this.isAlsoEqual()?"[":"]"}${h} ; ${a}\\right${this.isAlsoEqual()?"]":"["}`]):1===this._solutions.length&&this._solutions[0]!==this._varnothing?this.isAlsoEqual()?(this.isGreater()&&1===u.sign()||!this.isGreater()&&-1===u.sign())&&(this._solutions=[this._real]):this.isGreater()&&1===u.sign()||!this.isGreater()&&-1===u.sign()?this._solutions=[`\\left]-\\infty ; ${this._solutions[0]}\\right[ \\cup \\left]${this._solutions[0]};+\\infty\\right[`]:this._solutions=[this._varnothing]:this.isGreater()?this._solutions=[1===u.sign()?this._real:this._varnothing]:this._solutions=[-1===u.sign()?this._real:this._varnothing]),this._solutions},this._solveDegree3plus=t=>(this._solutions=[t],this._solutions),this.generate=(t,e)=>(new a).create(new h,new h,e),this._reverseSign=()=>"="===this._sign?this:this._sign.includes("<")?(this._sign.replace("<",">"),this):this._sign.includes(">")?(this._sign.replace(">","<"),this):this,this.multiply=t=>(this._left.multiplyByFraction(t),this._right.multiplyByFraction(t),"="!==this._sign&&-1===t.sign()&&this._reverseSign(),this),this.add=t=>(this._left.add(t.left),this._right.add(t.right),this),this.substract=t=>(this._left.substract(t.left),this._right.substract(t.right),this),void 0===t?(this._left=(new h).zero(),this._right=(new h).zero(),this._sign="="):this.parseString(t),this}get solutions(){return this._solutions}get solution(){return 1!==this._solutions.length||this._solutions[0]!==this._real&&this._solutions[0]!==this._varnothing&&!this._solutions[0].includes("\\left")?`S = \\left{ ${this._solutions.join(";")} \\right}`:`S = ${this._solutions[0]}`}get isReal(){return void 0===this._solutions&&this.solve(),this._solutions[0]===this._real}get isVarvothing(){return void 0===this._solutions&&this.solve(),this._solutions[0]===this._varnothing}get signAsTex(){return">="===this._sign||"=>"===this._sign||"geq"===this._sign?"\\geq":"<="===this._sign||"=<"===this._sign||"leq"===this._sign?"\\leq":this._sign}get tex(){return`${this._left.tex}${this.signAsTex}${this._right.tex}`}get raw(){return`${this._left.raw}${this.signAsTex}${this._right.raw}`}get variables(){return[...new Set(this._right.variables.concat(this._left.variables))]}get numberOfVars(){return this.variables.length}get left(){return this._left}set left(t){this._left=t}get right(){return this._right}set right(t){this._right=t}get sign(){return this._sign}set sign(t){this._sign=this._formatSign(t)}}class u{constructor(){this.create=(...t)=>(this._equations=t,this),this.parse=(...t)=>(this._equations=t.map(t=>new a(t)),this),this.generate=(...t)=>{let e=[];for(let i of t)"number"==typeof i?e.push(new r(i.toString())):e.push(i.clone());this._equations=[];for(let i=0;i<t.length;i++)this._equations.push(this._generateOneEquation(...e));return this},this._generateOneEquation=(...t)=>{let e,i=[],n=(new r).zero(),o=["x","y","z","t","u","v","w","a","b","c","d","e","f","g","h","i","j","k","l"],h="";for(let e=0;e<t.length;e++)i.push(s.randomIntSym(5)),n.add(t[e].clone().multiplyByInt(i[e])),h+=`${i[e]<0?i[e]:"+"+i[e]}${o[e]}`;return e=new a(`${h}=${n.display}`),1!=e.right.monoms[0].coefficient.denominator&&e.multiply((new r).parseByInteger(e.right.monoms[0].coefficient.denominator,1)),this._checkIfLinerCombination(e)?e:this._generateOneEquation(...t)},this._checkIfLinerCombination=t=>!0,this.log=()=>{let t="";for(let e of this._equations)console.log(e.tex),t+=`${e.tex}\\n}`;return t},this.clone=()=>{let t=[];for(let e of this._equations)t.push(e.clone());return(new u).create(...t)},this.reorder=()=>{for(let t of this._equations)t.reorder();return this},this.solve=()=>{this._solutions={},this._resolutionSteps=[],this.reorder();let t=this.variables.sort();for(let e of t)this._solutions[e]=this._solveOneLetter(e,t);return this}}_solveOneLetter(t,e){console.log("SOLVE: ",t);let i=this.clone().equations,s=[];for(let r of e)if(r!==t){for(let t=0;t<i.length-1;t++)s.push(u._linearReduction(i[t],i[t+1],r));this._resolutionSteps.push((new u).create(...s)),i=this._resolutionSteps[this._resolutionSteps.length-1].clone().equations,s=[]}let n=this._resolutionSteps[this._resolutionSteps.length-1].equations[0];return console.log(n.tex),n.solve(),console.log(n.solutions),{value:new r(n.solutions[0]),isReal:n.isReal,isVarnothing:n.isVarvothing}}static _linearReduction(t,e,i){let s=t.left.monomByDegree(1,i).coefficient.clone(),r=e.left.monomByDegree(1,i).coefficient.clone();return t.clone().multiply(r).substract(e.clone().multiply(s)).reorder()}get isSolvable(){return this.variables.length===this._equations.length}get variables(){let t=[];for(let e of this._equations)t=t.concat(e.variables);return[...new Set(t)].sort()}get tex(){let t,e,i=this.clone().reorder(),s=i.variables,r=[];for(let n of i.equations){t=[];for(let i of s)e=n.left.monomByLetter(i),0===t.length?t.push(e.isZero?"":e.tex):t.push(e.isZero?"":(1===e.coefficient.sign()?"+":"")+e.tex);t.push("="),t.push(n.right.tex),r.push(t.join("&"))}return`\\left\\{<br>\\begin{array}{${"r".repeat(s.length)}cl}<br>${r.join("\\\\ <br>")}<br>\\end{array}<br>\\right.`}get texSolution(){let t=[];void 0===this._solutions&&this.solve();for(let e in this._solutions){if(this._solutions[e].isReal)return void console.log(`Undetermined (letter ${e})`);if(this._solutions[e].isVarnothing)return void console.log(`Undefined (letter ${e})`);t.push(this._solutions[e].value.dfrac)}return`(${t.join(";")})`}set equations(t){this._equations=t}get equations(){return this._equations}}window.Pi={Numeric:s,Fraction:r,Root:l,Monom:n,Polynom:h,Equation:a,LinearSystem:u};var c={Numeric:s,Fraction:r,Root:l,Monom:n,Polynom:h,Equation:a,LinearSystem:u}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,